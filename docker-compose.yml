version: "3.9"

services:
  # ============================ Telegram Bot =================================
  # Container que executará o módulo principal do rasa.
  bot:
    container_name: bot
    build:
      context: .
      dockerfile: ./docker/bot.Dockerfile
    env_file:
      - .env
    volumes:
      - ./bot/:/bot/
    ports:
      - 80:80
    depends_on:
      - actions
      - consumer
      - postgres
    networks:
      - bot
    command: rasa run --enable-api -m models/ --cors '*' --port 80

  # ================================= Actions =================================
  # Container usado para execução de funções personalizadas e conexões com API.
  actions:
    container_name: actions
    build:
      context: .
      dockerfile: ./docker/actions.Dockerfile
    env_file:
      - .env
    ports:
      - 5055:5055
    volumes:
      - ./bot:/bot
    networks:
      - bot
    command: python -m rasa_sdk --actions actions -p 5055

  # ================================= RabbitMQ =================================
  # Event broker para o rasa.
  rabbitmq:
    container_name: rabbitmq
    image: "rabbitmq:3.12.6-management"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - bot

  # ================================= Consumer =================================
  # Consumidor genérico para fornecer as conversas para o elasticsearch
  consumer:
    container_name: consumer
    build:
      context: .
      dockerfile: ./docker/consumer.Dockerfile
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - elasticsearch
      - kibana
    networks:
      - bot

  # ================================= Elasticseacrh =================================
  # Armazena e persiste as conversas
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_USER=${ES_USERNAME}
      - ELASTIC_PASSWORD=${ES_PASSWORD}
    volumes:
      - elsdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - bot

  # ================================= Kibana =================================
  # Ferramenta de exibição e análise das conversas
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.14.0
    environment:
     - ELASTICSEARCH_URL=http://elasticsearch:9200
     - xpack.security.enabled=true
     - ELASTICSEARCH_USERNAME=${ES_USERNAME}
     - ELASTICSEARCH_PASSWORD=${ES_PASSWORD}
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - bot

  # ================================= Postgres =================================
  # Persistência de dados 
  postgres:
    container_name: postgres
    image: postgres:13
    environment:
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USERNAME}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./utils/init-pg.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - bot


networks:
  bot:
    name: bot
    driver: bridge


volumes:
  elsdata:
    name: elsdata
  pgdata:
    name: pgdata
